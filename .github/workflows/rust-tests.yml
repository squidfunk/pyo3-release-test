name: Rust Tests

on:
  push:
    branches: [main, master]
  pull_request:
    branches: [main, master]
  schedule:
    # Run tests daily at 00:00 UTC to catch issues with dependencies
    - cron: '0 0 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test-native:
    name: Test Rust on ${{ matrix.os }} (${{ matrix.target }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        include:
          # Linux
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
          - os: ubuntu-latest
            target: i686-unknown-linux-gnu
          # Windows
          - os: windows-latest
            target: x86_64-pc-windows-msvc
          - os: windows-latest
            target: i686-pc-windows-msvc
          # macOS
          - os: macos-13
            target: x86_64-apple-darwin
          - os: macos-14
            target: aarch64-apple-darwin

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install 32-bit dependencies (Linux)
        if: matrix.target == 'i686-unknown-linux-gnu'
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-multilib

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}

      - name: Run cargo check
        run: cargo check --target ${{ matrix.target }} --all-targets

      - name: Run cargo test
        run: cargo test --target ${{ matrix.target }} --all-targets

      - name: Run cargo test (release mode)
        run: cargo test --target ${{ matrix.target }} --release --all-targets

      - name: Run doctests
        run: cargo test --target ${{ matrix.target }} --doc

  test-cross-compile:
    name: Cross-compile test for ${{ matrix.target }}
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        target:
          # Linux targets
          - aarch64-unknown-linux-gnu
          - armv7-unknown-linux-gnueabihf
          - aarch64-unknown-linux-musl
          - x86_64-unknown-linux-musl
          - i686-unknown-linux-musl
          # Other targets that your project might support
          - s390x-unknown-linux-gnu
          - powerpc64le-unknown-linux-gnu

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Install cross
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: ${{ matrix.target }}-cross

      - name: Cross-compile check
        run: cross check --target ${{ matrix.target }}

      - name: Cross-compile test
        run: cross test --target ${{ matrix.target }}

  test-emulated:
    name: Test on ${{ matrix.arch }} (emulated)
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        include:
          - arch: aarch64
            distro: ubuntu22.04
          - arch: armv7
            distro: ubuntu22.04
          - arch: s390x
            distro: ubuntu22.04
          - arch: ppc64le
            distro: ubuntu22.04

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Test on ${{ matrix.arch }}
        uses: uraimo/run-on-arch-action@v2
        with:
          arch: ${{ matrix.arch }}
          distro: ${{ matrix.distro }}
          githubToken: ${{ github.token }}
          setup: |
            mkdir -p "${PWD}/target"
          dockerRunArgs: |
            --volume "${PWD}/target:/home/runner/work/target"
          install: |
            apt-get update -q -y
            apt-get install -q -y curl build-essential
            curl --proto '=https' --tlsv1.2 -sSf https://sh.rustup.rs | sh -s -- -y
            source ~/.cargo/env
            rustup default stable
          run: |
            source ~/.cargo/env
            cd ${GITHUB_WORKSPACE}
            cargo test --verbose
            cargo test --release --verbose
            cargo test --doc --verbose

  test-features:
    name: Test feature combinations
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Test default features
        run: cargo test

      - name: Test no default features
        run: cargo test --no-default-features

      - name: Test all features
        run: cargo test --all-features

      - name: Check minimal versions
        run: |
          cargo install cargo-minimal-versions
          cargo minimal-versions check
          cargo minimal-versions test

  test-msrv:
    name: Test Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Extract MSRV from Cargo.toml
        id: msrv
        run: |
          MSRV=$(grep -oP '^rust-version\s*=\s*"\K[^"]*' Cargo.toml || echo "1.56")
          echo "msrv=$MSRV" >> $GITHUB_OUTPUT

      - name: Install Rust toolchain (MSRV)
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ steps.msrv.outputs.msrv }}

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: msrv-${{ steps.msrv.outputs.msrv }}

      - name: Test with MSRV
        run: cargo test

  security-audit:
    name: Security audit
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Run security audit
        run: cargo audit

  lint:
    name: Rust linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache Rust dependencies
        uses: Swatinem/rust-cache@v2

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: -D warnings
